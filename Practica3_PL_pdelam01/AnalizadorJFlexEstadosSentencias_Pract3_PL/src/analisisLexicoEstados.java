// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Practica3_Estados_JFLEX.jflex

// Cálculo de la densidad de comentarios clásicos (/*..*/)


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class analisisLexicoEstados {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int BLOQUE_JAVA = 2;
  public static final int BLOQUE_PHP = 4;
  public static final int BLOQUE_STRING_JAVA = 6;
  public static final int BLOQUE_STRING_PHP = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\0\1\7\1\0\1\10\1\0\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\12\21"+
    "\1\0\1\22\1\23\1\24\1\25\2\0\1\26\1\27"+
    "\2\26\1\30\2\26\1\31\1\26\1\32\5\26\1\33"+
    "\2\26\1\34\7\26\4\0\1\26\1\0\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\2\26"+
    "\1\46\1\26\1\47\1\50\2\26\1\51\1\52\1\53"+
    "\1\54\1\55\4\26\1\56\1\57\1\60\54\0\1\61"+
    "\12\0\1\61\4\0\1\61\5\0\27\61\1\0\37\61"+
    "\1\0\u01ca\61\4\0\14\61\16\0\5\61\7\0\1\61"+
    "\1\0\1\61\21\0\165\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\6\0\1\61\1\0\3\61\1\0\1\61"+
    "\1\0\24\61\1\0\123\61\1\0\213\61\1\0\255\61"+
    "\1\0\46\61\2\0\1\61\6\0\51\61\10\0\55\61"+
    "\1\0\1\61\1\0\2\61\1\0\2\61\1\0\1\61"+
    "\10\0\33\61\4\0\4\61\35\0\13\61\5\0\100\61"+
    "\12\21\4\0\146\61\1\0\10\61\2\0\12\61\1\0"+
    "\6\61\12\21\3\61\2\0\1\61\20\0\73\61\2\0"+
    "\145\61\16\0\12\21\54\61\4\0\1\61\2\0\1\61"+
    "\2\0\56\61\22\0\34\61\4\0\13\61\65\0\25\61"+
    "\1\0\10\61\25\0\17\61\1\0\201\61\2\0\12\21"+
    "\1\0\23\61\1\0\10\61\2\0\2\61\2\0\26\61"+
    "\1\0\7\61\1\0\1\61\3\0\4\61\2\0\11\61"+
    "\2\0\2\61\2\0\4\61\10\0\1\61\4\0\2\61"+
    "\1\0\5\61\2\0\12\21\2\61\12\0\1\61\1\0"+
    "\1\61\2\0\3\61\1\0\6\61\4\0\2\61\2\0"+
    "\26\61\1\0\7\61\1\0\2\61\1\0\2\61\1\0"+
    "\2\61\2\0\1\61\1\0\5\61\4\0\2\61\2\0"+
    "\3\61\3\0\1\61\7\0\4\61\1\0\1\61\7\0"+
    "\12\21\6\61\13\0\3\61\1\0\11\61\1\0\3\61"+
    "\1\0\26\61\1\0\7\61\1\0\2\61\1\0\5\61"+
    "\2\0\12\61\1\0\3\61\1\0\3\61\2\0\1\61"+
    "\17\0\4\61\2\0\12\21\11\0\7\61\1\0\3\61"+
    "\1\0\10\61\2\0\2\61\2\0\26\61\1\0\7\61"+
    "\1\0\2\61\1\0\5\61\2\0\11\61\2\0\2\61"+
    "\2\0\3\61\10\0\2\61\4\0\2\61\1\0\5\61"+
    "\2\0\12\21\1\0\1\61\20\0\2\61\1\0\6\61"+
    "\3\0\3\61\1\0\4\61\3\0\2\61\1\0\1\61"+
    "\1\0\2\61\3\0\2\61\3\0\3\61\3\0\14\61"+
    "\4\0\5\61\3\0\3\61\1\0\4\61\2\0\1\61"+
    "\6\0\1\61\16\0\12\21\20\0\15\61\1\0\3\61"+
    "\1\0\27\61\1\0\20\61\3\0\10\61\1\0\3\61"+
    "\1\0\4\61\7\0\2\61\1\0\3\61\5\0\4\61"+
    "\2\0\12\21\20\0\4\61\1\0\10\61\1\0\3\61"+
    "\1\0\27\61\1\0\12\61\1\0\5\61\2\0\11\61"+
    "\1\0\3\61\1\0\4\61\7\0\2\61\7\0\1\61"+
    "\1\0\4\61\2\0\12\21\1\0\2\61\15\0\4\61"+
    "\1\0\10\61\1\0\3\61\1\0\63\61\1\0\3\61"+
    "\1\0\5\61\5\0\4\61\7\0\5\61\2\0\12\21"+
    "\12\0\6\61\2\0\2\61\1\0\22\61\3\0\30\61"+
    "\1\0\11\61\1\0\1\61\2\0\7\61\3\0\1\61"+
    "\4\0\6\61\1\0\1\61\1\0\10\61\6\0\12\21"+
    "\2\0\2\61\15\0\72\61\5\0\17\61\1\0\12\21"+
    "\47\0\2\61\1\0\1\61\1\0\5\61\1\0\30\61"+
    "\1\0\1\61\1\0\27\61\2\0\5\61\1\0\1\61"+
    "\1\0\6\61\2\0\12\21\2\0\4\61\40\0\1\61"+
    "\27\0\2\61\6\0\12\21\13\0\1\61\1\0\1\61"+
    "\1\0\1\61\4\0\12\61\1\0\44\61\4\0\24\61"+
    "\1\0\22\61\1\0\44\61\11\0\1\61\71\0\100\61"+
    "\12\21\6\0\100\61\12\21\4\61\2\0\46\61\1\0"+
    "\1\61\5\0\1\61\2\0\53\61\1\0\115\61\1\0"+
    "\4\61\2\0\7\61\1\0\1\61\1\0\4\61\2\0"+
    "\51\61\1\0\4\61\2\0\41\61\1\0\4\61\2\0"+
    "\7\61\1\0\1\61\1\0\4\61\2\0\17\61\1\0"+
    "\71\61\1\0\4\61\2\0\103\61\2\0\3\61\40\0"+
    "\20\61\20\0\126\61\2\0\6\61\3\0\u016c\61\2\0"+
    "\21\61\1\0\32\61\5\0\113\61\3\0\13\61\7\0"+
    "\15\61\1\0\7\61\13\0\25\61\13\0\24\61\14\0"+
    "\15\61\1\0\3\61\1\0\2\61\14\0\124\61\3\0"+
    "\1\61\4\0\2\61\2\0\12\21\41\0\3\61\2\0"+
    "\12\21\6\0\131\61\7\0\53\61\5\0\106\61\12\0"+
    "\37\61\1\0\14\61\4\0\14\61\12\0\12\21\36\61"+
    "\2\0\5\61\13\0\54\61\4\0\32\61\6\0\12\21"+
    "\46\0\34\61\4\0\77\61\1\0\35\61\2\0\1\61"+
    "\12\21\6\0\12\21\15\0\1\61\10\0\17\61\101\0"+
    "\114\61\4\0\12\21\21\0\11\61\14\0\60\61\12\21"+
    "\72\61\14\0\70\61\10\0\12\21\3\0\3\61\12\21"+
    "\44\61\2\0\11\61\7\0\53\61\2\0\3\61\20\0"+
    "\3\61\1\0\47\61\5\0\372\61\1\0\33\61\2\0"+
    "\6\61\2\0\46\61\2\0\6\61\2\0\10\61\1\0"+
    "\1\61\1\0\1\61\1\0\1\61\1\0\37\61\2\0"+
    "\65\61\1\0\7\61\1\0\1\61\3\0\3\61\1\0"+
    "\7\61\3\0\4\61\2\0\6\61\4\0\15\61\5\0"+
    "\3\61\1\0\7\61\102\0\2\61\23\0\1\61\34\0"+
    "\1\61\15\0\1\61\20\0\15\61\63\0\41\61\21\0"+
    "\1\61\4\0\1\61\2\0\12\61\1\0\1\61\3\0"+
    "\5\61\6\0\1\61\1\0\1\61\1\0\1\61\1\0"+
    "\4\61\1\0\13\61\2\0\4\61\5\0\5\61\4\0"+
    "\1\61\21\0\51\61\u022d\0\64\61\26\0\57\61\1\0"+
    "\57\61\1\0\205\61\6\0\11\61\14\0\46\61\1\0"+
    "\1\61\5\0\1\61\2\0\70\61\7\0\1\61\17\0"+
    "\30\61\11\0\7\61\1\0\7\61\1\0\7\61\1\0"+
    "\7\61\1\0\7\61\1\0\7\61\1\0\7\61\1\0"+
    "\7\61\1\0\40\61\57\0\1\61\325\0\3\61\31\0"+
    "\17\61\1\0\5\61\2\0\5\61\4\0\126\61\2\0"+
    "\2\61\2\0\3\61\1\0\132\61\1\0\4\61\5\0"+
    "\53\61\1\0\136\61\21\0\33\61\65\0\306\61\112\0"+
    "\360\61\20\0\215\61\103\0\56\61\2\0\15\61\3\0"+
    "\20\61\12\21\2\61\24\0\63\61\1\0\12\61\1\0"+
    "\163\61\45\0\11\61\2\0\147\61\2\0\65\61\2\0"+
    "\5\61\60\0\61\61\30\0\64\61\14\0\106\61\12\0"+
    "\12\21\6\0\30\61\3\0\1\61\1\0\3\61\12\21"+
    "\44\61\2\0\44\61\14\0\35\61\3\0\101\61\16\0"+
    "\1\61\12\21\6\0\20\61\12\21\5\61\1\0\67\61"+
    "\11\0\16\61\2\0\12\21\6\0\27\61\3\0\111\61"+
    "\30\0\3\61\2\0\20\61\2\0\5\61\12\0\6\61"+
    "\2\0\6\61\2\0\6\61\11\0\7\61\1\0\7\61"+
    "\1\0\53\61\1\0\14\61\10\0\173\61\1\0\2\61"+
    "\2\0\12\21\6\0\244\61\14\0\27\61\4\0\61\61"+
    "\4\0\156\61\2\0\152\61\46\0\7\61\14\0\5\61"+
    "\5\0\14\61\1\0\15\61\1\0\5\61\1\0\1\61"+
    "\1\0\2\61\1\0\2\61\1\0\154\61\41\0\153\61"+
    "\22\0\100\61\2\0\66\61\50\0\14\61\4\0\20\61"+
    "\20\0\20\61\3\0\2\61\30\0\3\61\40\0\5\61"+
    "\1\0\207\61\23\0\12\21\7\0\32\61\4\0\1\61"+
    "\1\0\32\61\13\0\131\61\3\0\6\61\2\0\6\61"+
    "\2\0\6\61\2\0\3\61\43\0\14\61\1\0\32\61"+
    "\1\0\23\61\1\0\2\61\1\0\17\61\2\0\16\61"+
    "\42\0\173\61\105\0\65\61\210\0\1\61\202\0\35\61"+
    "\3\0\61\61\17\0\1\61\37\0\40\61\15\0\36\61"+
    "\5\0\53\61\5\0\36\61\2\0\44\61\4\0\10\61"+
    "\1\0\5\61\52\0\236\61\2\0\12\21\6\0\44\61"+
    "\4\0\44\61\4\0\50\61\10\0\64\61\234\0\67\61"+
    "\11\0\26\61\12\0\10\61\230\0\6\61\2\0\1\61"+
    "\1\0\54\61\1\0\2\61\3\0\1\61\2\0\27\61"+
    "\12\0\27\61\11\0\37\61\101\0\23\61\1\0\2\61"+
    "\12\0\26\61\12\0\32\61\106\0\70\61\6\0\2\61"+
    "\100\0\4\61\1\0\2\61\5\0\10\61\1\0\3\61"+
    "\1\0\35\61\2\0\3\61\4\0\1\61\40\0\35\61"+
    "\3\0\35\61\43\0\10\61\1\0\36\61\31\0\66\61"+
    "\12\0\26\61\12\0\23\61\15\0\22\61\156\0\111\61"+
    "\67\0\63\61\15\0\63\61\15\0\50\61\10\0\12\21"+
    "\306\0\35\61\12\0\1\61\10\0\41\61\217\0\27\61"+
    "\11\0\107\61\37\0\12\21\17\0\74\61\25\0\31\61"+
    "\7\0\12\21\6\0\65\61\1\0\12\21\4\0\3\61"+
    "\11\0\44\61\2\0\1\61\11\0\105\61\4\0\4\61"+
    "\3\0\12\21\1\61\1\0\1\61\43\0\22\61\1\0"+
    "\45\61\6\0\1\61\101\0\7\61\1\0\1\61\1\0"+
    "\4\61\1\0\17\61\1\0\12\61\7\0\73\61\5\0"+
    "\12\21\6\0\4\61\1\0\10\61\2\0\2\61\2\0"+
    "\26\61\1\0\7\61\1\0\2\61\1\0\5\61\1\0"+
    "\12\61\2\0\2\61\2\0\3\61\2\0\1\61\6\0"+
    "\1\61\5\0\7\61\2\0\7\61\3\0\5\61\213\0"+
    "\113\61\5\0\12\21\4\0\2\61\40\0\106\61\1\0"+
    "\1\61\10\0\12\21\246\0\66\61\2\0\11\61\27\0"+
    "\6\61\42\0\101\61\3\0\1\61\13\0\12\21\46\0"+
    "\71\61\7\0\12\21\66\0\33\61\2\0\17\61\4\0"+
    "\12\21\306\0\73\61\145\0\100\61\12\21\25\0\1\61"+
    "\240\0\10\61\2\0\56\61\2\0\10\61\1\0\2\61"+
    "\33\0\77\61\10\0\1\61\10\0\112\61\3\0\1\61"+
    "\42\0\71\61\7\0\11\61\1\0\55\61\1\0\11\61"+
    "\17\0\12\21\30\0\36\61\2\0\26\61\1\0\16\61"+
    "\111\0\7\61\1\0\2\61\1\0\54\61\3\0\1\61"+
    "\1\0\2\61\1\0\11\61\10\0\12\21\6\0\6\61"+
    "\1\0\2\61\1\0\45\61\1\0\2\61\1\0\6\61"+
    "\7\0\12\21\u0136\0\27\61\11\0\232\61\146\0\157\61"+
    "\21\0\304\61\274\0\57\61\321\0\107\61\271\0\71\61"+
    "\7\0\37\61\1\0\12\21\146\0\36\61\2\0\5\61"+
    "\13\0\67\61\11\0\4\61\14\0\12\21\11\0\25\61"+
    "\5\0\23\61\260\0\100\61\200\0\113\61\4\0\71\61"+
    "\7\0\21\61\100\0\2\61\1\0\1\61\34\0\370\61"+
    "\10\0\363\61\15\0\37\61\61\0\3\61\21\0\4\61"+
    "\10\0\u018c\61\4\0\153\61\5\0\15\61\3\0\11\61"+
    "\7\0\12\61\3\0\2\61\306\0\5\61\3\0\6\61"+
    "\10\0\10\61\2\0\7\61\36\0\4\61\224\0\3\61"+
    "\273\0\125\61\1\0\107\61\1\0\2\61\2\0\1\61"+
    "\2\0\2\61\2\0\4\61\1\0\14\61\1\0\1\61"+
    "\1\0\7\61\1\0\101\61\1\0\4\61\2\0\10\61"+
    "\1\0\7\61\1\0\34\61\1\0\4\61\1\0\5\61"+
    "\1\0\1\61\3\0\7\61\1\0\u0154\61\2\0\31\61"+
    "\1\0\31\61\1\0\37\61\1\0\31\61\1\0\37\61"+
    "\1\0\31\61\1\0\37\61\1\0\31\61\1\0\37\61"+
    "\1\0\31\61\1\0\10\61\2\0\62\21\67\61\4\0"+
    "\62\61\10\0\1\61\16\0\1\61\26\0\5\61\1\0"+
    "\17\61\120\0\7\61\1\0\21\61\2\0\7\61\1\0"+
    "\2\61\1\0\5\61\325\0\55\61\3\0\16\61\2\0"+
    "\12\21\4\0\1\61\u0171\0\60\61\12\21\6\0\305\61"+
    "\13\0\7\61\51\0\114\61\4\0\12\21\246\0\4\61"+
    "\1\0\33\61\1\0\2\61\1\0\1\61\2\0\1\61"+
    "\1\0\12\61\1\0\4\61\1\0\1\61\1\0\1\61"+
    "\6\0\1\61\4\0\1\61\1\0\1\61\1\0\1\61"+
    "\1\0\3\61\1\0\2\61\1\0\1\61\2\0\1\61"+
    "\1\0\1\61\1\0\1\61\1\0\1\61\1\0\1\61"+
    "\1\0\2\61\1\0\1\61\2\0\4\61\1\0\7\61"+
    "\1\0\4\61\1\0\4\61\1\0\1\61\1\0\12\61"+
    "\1\0\21\61\5\0\3\61\1\0\5\61\1\0\21\61"+
    "\164\0\32\61\6\0\32\61\6\0\32\61\166\0\327\61"+
    "\51\0\65\61\13\0\336\61\2\0\u0182\61\16\0\u0131\61"+
    "\37\0\36\61\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\3\2\1\1\1\2\1\3\1\4\2\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\10\22\1\23\1\1"+
    "\1\24\1\2\1\25\1\26\1\1\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\10\44\1\45\1\1\1\46\1\47\1\2"+
    "\1\50\1\51\1\52\4\0\1\53\1\54\1\55\1\56"+
    "\1\57\6\22\1\60\1\61\3\0\1\62\1\63\1\64"+
    "\1\65\6\44\1\66\1\67\4\0\6\22\3\0\6\44"+
    "\2\0\1\70\1\0\4\22\1\71\1\22\1\0\1\72"+
    "\1\0\4\44\1\73\1\44\1\0\4\22\1\70\5\44"+
    "\1\72\2\0\2\22\1\74\1\44\1\75\2\0\1\76"+
    "\1\0\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\372\0\372\0\u01f4\0\u0226\0\372"+
    "\0\372\0\372\0\372\0\372\0\372\0\372\0\372\0\u0258"+
    "\0\372\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6"+
    "\0\u03e8\0\u041a\0\u044c\0\u047e\0\372\0\u04b0\0\372\0\u04e2"+
    "\0\372\0\372\0\u0514\0\372\0\372\0\372\0\372\0\372"+
    "\0\372\0\372\0\372\0\u0546\0\372\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c"+
    "\0\372\0\u079e\0\372\0\372\0\u07d0\0\372\0\372\0\372"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\372\0\372\0\372"+
    "\0\372\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0320"+
    "\0\372\0\u0a28\0\u0a5a\0\u0a8c\0\372\0\372\0\372\0\372"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u060e\0\372"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\372\0\u1004\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u0320\0\u10fe\0\u1130\0\372\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\u0320\0\u13ba\0\u13ec\0\u141e\0\u1450"+
    "\0\u1482\0\u060e\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u060e\0\u157c"+
    "\0\u060e\0\u15ae\0\u15e0\0\u0320\0\u1612\0\372\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\11\22\6\1\12\33\6\2\7"+
    "\1\10\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\35\1\36\3\35\1\37\1\35"+
    "\1\40\1\35\1\41\1\42\1\43\2\35\1\44\10\35"+
    "\1\45\1\46\1\47\2\6\2\7\1\10\1\50\1\51"+
    "\1\52\1\7\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\2\71\1\72\3\71\1\73\1\71\1\74\1\71\1\75"+
    "\1\76\1\77\2\71\1\100\10\71\1\101\1\102\1\103"+
    "\2\6\2\7\1\10\1\11\1\6\1\104\12\6\1\105"+
    "\1\106\3\6\30\105\3\6\1\105\1\6\2\7\1\10"+
    "\1\11\1\6\1\107\12\6\1\105\1\110\3\6\30\105"+
    "\3\6\1\105\64\0\1\7\63\0\1\11\116\0\1\111"+
    "\24\0\1\11\32\0\1\112\5\0\1\113\7\0\1\114"+
    "\32\0\30\115\14\0\1\116\72\0\1\30\64\0\1\117"+
    "\61\0\1\120\61\0\1\121\56\0\1\35\4\0\30\35"+
    "\3\0\1\35\21\0\1\35\4\0\21\35\1\122\6\35"+
    "\3\0\1\35\21\0\1\35\4\0\25\35\1\123\2\35"+
    "\3\0\1\35\21\0\1\35\4\0\22\35\1\124\5\35"+
    "\3\0\1\35\21\0\1\35\4\0\22\35\1\125\5\35"+
    "\3\0\1\35\21\0\1\35\4\0\20\35\1\126\7\35"+
    "\3\0\1\35\21\0\1\35\4\0\20\35\1\127\7\35"+
    "\3\0\1\35\21\0\1\35\4\0\14\35\1\130\13\35"+
    "\3\0\1\35\57\0\1\131\6\0\1\11\32\0\1\132"+
    "\5\0\1\133\7\0\1\134\14\0\1\135\72\0\1\64"+
    "\64\0\1\136\61\0\1\137\61\0\1\140\56\0\1\71"+
    "\4\0\30\71\3\0\1\71\21\0\1\71\4\0\21\71"+
    "\1\141\6\71\3\0\1\71\21\0\1\71\4\0\25\71"+
    "\1\142\2\71\3\0\1\71\21\0\1\71\4\0\22\71"+
    "\1\143\5\71\3\0\1\71\21\0\1\71\4\0\22\71"+
    "\1\144\5\71\3\0\1\71\21\0\1\71\4\0\20\71"+
    "\1\145\7\71\3\0\1\71\21\0\1\71\4\0\20\71"+
    "\1\146\7\71\3\0\1\71\21\0\1\71\4\0\14\71"+
    "\1\147\13\71\3\0\1\71\57\0\1\150\23\0\1\105"+
    "\4\0\30\105\3\0\1\105\43\0\1\151\62\0\1\152"+
    "\64\0\1\153\62\0\1\154\32\0\1\115\4\0\30\115"+
    "\3\0\1\115\21\0\1\35\4\0\12\35\1\155\15\35"+
    "\3\0\1\35\21\0\1\35\4\0\23\35\1\156\4\35"+
    "\3\0\1\35\21\0\1\35\4\0\22\35\1\157\5\35"+
    "\3\0\1\35\21\0\1\35\4\0\26\35\1\160\1\35"+
    "\3\0\1\35\21\0\1\35\4\0\24\35\1\161\3\35"+
    "\3\0\1\35\21\0\1\35\4\0\22\35\1\162\5\35"+
    "\3\0\1\35\44\0\1\163\64\0\1\164\62\0\1\165"+
    "\32\0\1\71\4\0\12\71\1\166\15\71\3\0\1\71"+
    "\21\0\1\71\4\0\23\71\1\167\4\71\3\0\1\71"+
    "\21\0\1\71\4\0\22\71\1\170\5\71\3\0\1\71"+
    "\21\0\1\71\4\0\26\71\1\171\1\71\3\0\1\71"+
    "\21\0\1\71\4\0\24\71\1\172\3\71\3\0\1\71"+
    "\21\0\1\71\4\0\22\71\1\173\5\71\3\0\1\71"+
    "\45\0\1\174\51\0\1\175\77\0\1\176\53\0\1\177"+
    "\35\0\1\35\4\0\4\35\1\200\23\35\3\0\1\35"+
    "\21\0\1\35\4\0\17\35\1\201\10\35\3\0\1\35"+
    "\21\0\1\35\4\0\20\35\1\202\7\35\3\0\1\35"+
    "\21\0\1\35\4\0\10\35\1\203\17\35\3\0\1\35"+
    "\21\0\1\35\4\0\13\35\1\204\14\35\3\0\1\35"+
    "\21\0\1\35\4\0\7\35\1\205\20\35\3\0\1\35"+
    "\35\0\1\206\77\0\1\207\53\0\1\210\35\0\1\71"+
    "\4\0\5\71\1\211\22\71\3\0\1\71\21\0\1\71"+
    "\4\0\17\71\1\212\10\71\3\0\1\71\21\0\1\71"+
    "\4\0\20\71\1\213\7\71\3\0\1\71\21\0\1\71"+
    "\4\0\10\71\1\214\17\71\3\0\1\71\21\0\1\71"+
    "\4\0\13\71\1\215\14\71\3\0\1\71\21\0\1\71"+
    "\4\0\7\71\1\216\20\71\3\0\1\71\47\0\1\217"+
    "\63\0\1\176\50\0\1\176\42\0\1\35\4\0\7\35"+
    "\1\220\20\35\3\0\1\35\21\0\1\35\4\0\21\35"+
    "\1\221\6\35\3\0\1\35\21\0\1\35\4\0\13\35"+
    "\1\222\14\35\3\0\1\35\21\0\1\35\4\0\20\35"+
    "\1\223\7\35\3\0\1\35\21\0\1\35\4\0\25\35"+
    "\1\224\2\35\3\0\1\35\51\0\1\207\50\0\1\207"+
    "\42\0\1\71\4\0\3\71\1\225\24\71\3\0\1\71"+
    "\21\0\1\71\4\0\21\71\1\226\6\71\3\0\1\71"+
    "\21\0\1\71\4\0\13\71\1\227\14\71\3\0\1\71"+
    "\21\0\1\71\4\0\20\71\1\230\7\71\3\0\1\71"+
    "\21\0\1\71\4\0\17\71\1\231\10\71\3\0\1\71"+
    "\21\0\1\71\4\0\25\71\1\232\2\71\3\0\1\71"+
    "\32\0\1\233\1\234\47\0\1\35\4\0\27\35\1\235"+
    "\3\0\1\35\21\0\1\35\4\0\15\35\1\224\12\35"+
    "\3\0\1\35\21\0\1\35\4\0\7\35\1\236\20\35"+
    "\3\0\1\35\21\0\1\35\4\0\13\35\1\224\14\35"+
    "\3\0\1\35\21\0\1\71\4\0\5\71\1\237\22\71"+
    "\3\0\1\71\21\0\1\71\4\0\15\71\1\232\12\71"+
    "\3\0\1\71\21\0\1\71\4\0\7\71\1\240\20\71"+
    "\3\0\1\71\21\0\1\71\4\0\13\71\1\232\14\71"+
    "\3\0\1\71\21\0\1\71\4\0\14\71\1\241\13\71"+
    "\3\0\1\71\35\0\1\242\55\0\1\243\51\0\1\35"+
    "\4\0\7\35\1\244\20\35\3\0\1\35\21\0\1\35"+
    "\4\0\21\35\1\224\6\35\3\0\1\35\21\0\1\71"+
    "\4\0\21\71\1\232\6\71\3\0\1\71\55\0\1\245"+
    "\37\0\1\246\63\0\1\247\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5700];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\4\1\2\11\2\1\10\11\1\1\1\11"+
    "\13\1\1\11\1\1\1\11\1\1\2\11\1\1\10\11"+
    "\1\1\1\11\13\1\1\11\1\1\2\11\1\1\3\11"+
    "\4\0\1\1\4\11\7\1\1\11\3\0\4\11\7\1"+
    "\1\11\4\0\6\1\3\0\6\1\2\0\1\11\1\0"+
    "\6\1\1\0\1\11\1\0\6\1\1\0\13\1\2\0"+
    "\5\1\2\0\1\1\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  analisisLexicoEstados(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 65: break;
          case 2:
            { System.out.print("");
            }
            // fall through
          case 66: break;
          case 3:
            { System.out.println("JAVA_OP_NOT");
            }
            // fall through
          case 67: break;
          case 4:
            { System.out.println("JAVA_CAD_INI"); yybegin(BLOQUE_STRING_JAVA);
            }
            // fall through
          case 68: break;
          case 5:
            { System.out.println("JAVA_INI_PAR");
            }
            // fall through
          case 69: break;
          case 6:
            { System.out.println("JAVA_FIN_PAR");
            }
            // fall through
          case 70: break;
          case 7:
            { System.out.println("JAVA_OP_MULTIPLICACION");
            }
            // fall through
          case 71: break;
          case 8:
            { System.out.println("JAVA_OP_SUMA");
            }
            // fall through
          case 72: break;
          case 9:
            { System.out.println("JAVA_COMA");
            }
            // fall through
          case 73: break;
          case 10:
            { System.out.println("JAVA_OP_RESTA");
            }
            // fall through
          case 74: break;
          case 11:
            { System.out.println("JAVA_PUNTO");
            }
            // fall through
          case 75: break;
          case 12:
            { System.out.println("JAVA_OP_DIVISION");
            }
            // fall through
          case 76: break;
          case 13:
            { System.out.println("JAVA_LITERAL"+"("+yytext()+")");
            }
            // fall through
          case 77: break;
          case 14:
            { System.out.println("JAVA_PUNTOYCOMA");
            }
            // fall through
          case 78: break;
          case 15:
            { System.out.println("JAVA_OP_MENOR");
            }
            // fall through
          case 79: break;
          case 16:
            { System.out.println("JAVA_OP_ASIGNAR");
            }
            // fall through
          case 80: break;
          case 17:
            { System.out.println("JAVA_OP_MAYOR");
            }
            // fall through
          case 81: break;
          case 18:
            { System.out.println("JAVA_ID"+"("+yytext()+")");
            }
            // fall through
          case 82: break;
          case 19:
            { System.out.println("JAVA_INI_LLA");
            }
            // fall through
          case 83: break;
          case 20:
            { System.out.println("JAVA_FIN_LLA");
            }
            // fall through
          case 84: break;
          case 21:
            { System.out.println("PHP_OP_NOT");
            }
            // fall through
          case 85: break;
          case 22:
            { System.out.println("PHP_CAD_INI"); yybegin(BLOQUE_STRING_PHP);
            }
            // fall through
          case 86: break;
          case 23:
            { System.out.println("PHP_INI_PAR");
            }
            // fall through
          case 87: break;
          case 24:
            { System.out.println("PHP_FIN_PAR");
            }
            // fall through
          case 88: break;
          case 25:
            { System.out.println("PHP_OP_MULTIPLICACION");
            }
            // fall through
          case 89: break;
          case 26:
            { System.out.println("PHP_OP_SUMA");
            }
            // fall through
          case 90: break;
          case 27:
            { System.out.println("PHP_COMA");
            }
            // fall through
          case 91: break;
          case 28:
            { System.out.println("PHP_OP_RESTA");
            }
            // fall through
          case 92: break;
          case 29:
            { System.out.println("PHP_PUNTO");
            }
            // fall through
          case 93: break;
          case 30:
            { System.out.println("PHP_OP_DIVISION");
            }
            // fall through
          case 94: break;
          case 31:
            { System.out.println("PHP_LITERAL"+"("+yytext()+")");
            }
            // fall through
          case 95: break;
          case 32:
            { System.out.println("PHP_PUNTOYCOMA");
            }
            // fall through
          case 96: break;
          case 33:
            { System.out.println("PHP_OP_MENOR");
            }
            // fall through
          case 97: break;
          case 34:
            { System.out.println("PHP_OP_ASIGNAR");
            }
            // fall through
          case 98: break;
          case 35:
            { System.out.println("PHP_OP_MAYOR");
            }
            // fall through
          case 99: break;
          case 36:
            { System.out.println("PHP_ID"+"("+yytext()+")");
            }
            // fall through
          case 100: break;
          case 37:
            { System.out.println("PHP_INI_LLA");
            }
            // fall through
          case 101: break;
          case 38:
            { System.out.println("PHP_FIN_LLA");
            }
            // fall through
          case 102: break;
          case 39:
            { System.out.println("JAVA_CAD_FIN"); yybegin(BLOQUE_JAVA);
            }
            // fall through
          case 103: break;
          case 40:
            { System.out.println("ERROR JAVA: NO PUEDE HABER UN ';' ANTES DE ACABAR LA CADENA");
            }
            // fall through
          case 104: break;
          case 41:
            { System.out.println("PHP_CAD_FIN"); yybegin(BLOQUE_PHP);
            }
            // fall through
          case 105: break;
          case 42:
            { System.out.println("ERROR PHP: NO PUEDE HABER UN ';' ANTES DE ACABAR LA CADENA");
            }
            // fall through
          case 106: break;
          case 43:
            { System.out.println("ERROR JAVA: NO PUEDE HABER UNA VARIABLE QUE COMIENCE POR '$' "+"("+yytext()+")");
            }
            // fall through
          case 107: break;
          case 44:
            { System.out.println("JAVA_OP_AND");
            }
            // fall through
          case 108: break;
          case 45:
            { System.out.println("JAVA_OP_MENORIGUAL");
            }
            // fall through
          case 109: break;
          case 46:
            { System.out.println("JAVA_OP_IGUAL");
            }
            // fall through
          case 110: break;
          case 47:
            { System.out.println("JAVA_OP_MAYORIGUAL");
            }
            // fall through
          case 111: break;
          case 48:
            { System.out.println("JAVA_IF");
            }
            // fall through
          case 112: break;
          case 49:
            { System.out.println("JAVA_OP_OR");
            }
            // fall through
          case 113: break;
          case 50:
            { System.out.println("PHP_OP_AND");
            }
            // fall through
          case 114: break;
          case 51:
            { System.out.println("PHP_OP_MENORIGUAL");
            }
            // fall through
          case 115: break;
          case 52:
            { System.out.println("PHP_OP_IGUAL");
            }
            // fall through
          case 116: break;
          case 53:
            { System.out.println("PHP_OP_MAYORIGUAL");
            }
            // fall through
          case 117: break;
          case 54:
            { System.out.println("PHP_IF");
            }
            // fall through
          case 118: break;
          case 55:
            { System.out.println("PHP_OP_OR");
            }
            // fall through
          case 119: break;
          case 56:
            { System.out.println("JAVA_TYPE");
            }
            // fall through
          case 120: break;
          case 57:
            { System.out.println("JAVA_ELSE");
            }
            // fall through
          case 121: break;
          case 58:
            { System.out.println("PHP_TYPE");
            }
            // fall through
          case 122: break;
          case 59:
            { System.out.println("PHP_ELSE");
            }
            // fall through
          case 123: break;
          case 60:
            { System.out.println("PHP_FIN"); yybegin(YYINITIAL);
            }
            // fall through
          case 124: break;
          case 61:
            { System.out.println("PHP_ELSEIF");
            }
            // fall through
          case 125: break;
          case 62:
            { System.out.println("JAVA_FIN"); yybegin(YYINITIAL);
            }
            // fall through
          case 126: break;
          case 63:
            { System.out.println("PHP_INI"); yybegin(BLOQUE_PHP);
            }
            // fall through
          case 127: break;
          case 64:
            { System.out.println("JAVA_INI"); yybegin(BLOQUE_JAVA);
            }
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java analisisLexicoEstados [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        analisisLexicoEstados scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new analisisLexicoEstados(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
